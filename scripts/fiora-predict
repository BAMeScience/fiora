#! /usr/bin/env python
import pandas as pd
import os
import warnings
from rdkit import RDLogger
RDLogger.DisableLog("rdApp.*")
warnings.filterwarnings("ignore", category=UserWarning, message="TypedStorage is deprecated")

import argparse
import importlib.resources
import fiora.IO.mgfWriter as mgfWriter
import fiora.IO.mspWriter as mspWriter

from fiora.GNN.GNNModules import GNNCompiler
from fiora.MS.SimulationFramework import SimulationFramework
from fiora.MOL.Metabolite import Metabolite
from fiora.GNN.AtomFeatureEncoder import AtomFeatureEncoder
from fiora.GNN.BondFeatureEncoder import BondFeatureEncoder
from fiora.GNN.SetupFeatureEncoder import SetupFeatureEncoder

def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(prog='fiora-predict',
                    description='Fiora is an in silico fragmentation framework, which predicts peaks and simulates tandem mass spectra including features such as retention time and collision cross sections. Use this script for spectrum predictions with a (pre-)trained model.',
                    epilog='Disclaimer:\nNo prediction software is perfect. This is an early prototype. Use with caution.')
    parser.add_argument("-i", "--input", help="input file containing molecular structures (SMILES/InChi) and metadata (.csv file)", type=str, required=True)
    parser.add_argument("-o", "--output", help="output file path (.mgf/.msp file)", type=str, required=True)
    parser.add_argument("--model", help="path to prediction model (.pt file)", type=str, default="default")
    parser.add_argument("--dev", help="Device to the model. For example cuda:0 for GPU number 0.", type=str, default="cpu")


    
    parser.add_argument('--rt', action=argparse.BooleanOptionalAction, help="predict retention time", default=False)
    parser.add_argument('--ccs', action=argparse.BooleanOptionalAction, help="predict collison cross section", default=False)
    parser.add_argument("--annotation", action=argparse.BooleanOptionalAction, help="annotate predicted peaks with SMILES strings", default=False)
    args = parser.parse_args()

    return args

def update_args_with_model_params(args: argparse.Namespace, model_params: dict) -> argparse.Namespace:
    
    if "rt_supported" in model_params.keys():
        if not model_params["rt_supported"] and args.rt:
            print("Warning: RT prediction is not support by the model. Overwriting user argument to --no-rt.\n")
            args.rt = False
    if "ccs_supported" in model_params.keys():
        if not model_params["ccs_supported"] and args.ccs:
            print("Warning: CCS prediction is not support by the model. Overwriting user argument to --no-ccs.\n")
            args.ccs = False
    return args

def print_model_messages(model_params: dict) -> None:
    if "version" in model_params.keys():
        print(f"-----Model-----")
        print(model_params["version"])
        print(f"---------------")
    if "disclaimer" in model_params.keys():
        dis_msg = model_params["disclaimer"]
        print(f"\nDisclaimer: {dis_msg}")

metadata_key_map = {
                "name": "Name",
                "collision_energy":  "CE", 
                "instrument": "Instrument_type",
                "precursor_mode": "Precursor_type",
                }


def build_metabolites(df: pd.DataFrame, model_params: dict):
    
    # Set feature encoder up
    CE_upper_limit = 100.0
    weight_upper_limit = 1000.0

    model_setup_feature_sets = None
    if "setup_features_categorical_set" in model_params.keys():
        model_setup_feature_sets = model_params["setup_features_categorical_set"]

    node_encoder = AtomFeatureEncoder(feature_list=["symbol", "num_hydrogen", "ring_type"])
    bond_encoder = BondFeatureEncoder(feature_list=["bond_type", "ring_type"])
    setup_encoder = SetupFeatureEncoder(feature_list=["collision_energy", "molecular_weight", "precursor_mode", "instrument"], sets_overwrite=model_setup_feature_sets)
    rt_encoder = SetupFeatureEncoder(feature_list=["molecular_weight", "precursor_mode", "instrument"], sets_overwrite=model_setup_feature_sets)

    setup_encoder.normalize_features["collision_energy"]["max"] = CE_upper_limit 
    setup_encoder.normalize_features["molecular_weight"]["max"] = weight_upper_limit 
    rt_encoder.normalize_features["molecular_weight"]["max"] = weight_upper_limit 

    # Convert SMILES to Metabolites and create structure graphs and fragmentation trees
    df["Metabolite"] = df["SMILES"].apply(Metabolite)
    df["Metabolite"].apply(lambda x: x.create_molecular_structure_graph())
    df["Metabolite"].apply(lambda x: x.compute_graph_attributes(node_encoder, bond_encoder))
    
    # Map covariate features to dedicated format and encode
    df["summary"] = df.apply(lambda x: {key: x[name] for key, name in metadata_key_map.items()}, axis=1)
    df.apply(lambda x: x["Metabolite"].add_metadata(x["summary"], setup_encoder, rt_encoder), axis=1)
    
    # Fragment coumpounds
    df["Metabolite"].apply(lambda x: x.fragment_MOL(depth=1))
    #df.apply(lambda x: x["Metabolite"].match_fragments_to_peaks(x["peaks"]["mz"], x["peaks"]["intensity"], tolerance=x["ppm_peak_tolerance"]), axis=1)
    
    return df

def main():
    args = parse_args()
    print(f'Running fiora prediction with the following parameters: {args}\n')

    # Load model
    if args.model == "default":
        with importlib.resources.path('models', 'fiora_OS_v0.1.0.pt') as model_path:
            args.model = str(model_path)
    
    try:
        model = GNNCompiler.load_from_state_dict(args.model)
    except Exception as e:
        print(f"Error: Failed loading from model from state dict. Caused by: {e}.")
        exit(1)
        
    print_model_messages(model.model_params)
    args = update_args_with_model_params(args, model.model_params)

    
    model.eval()
    model = model.to(args.dev)

    # Set up Fiora
    fiora = SimulationFramework(None, dev=args.dev, with_RT=True, with_CCS=True)

    # Load the data
    df = pd.read_csv(args.input)
    
    # Construct molecular structure graphs and fragmentation trees
    df = build_metabolites(df, model.model_params)
    
    # Simulate compound fragmentation
    df = fiora.simulate_all(df, model, groundtruth=False)
    df["peaks"] = df["sim_peaks"]
    df["RETENTIONTIME"] = df["RT_pred"] 
    df["CCS"] = df["CCS_pred"] 
    version = model.model_params["version"] if "version" in model.model_params else "(pre-release version v0.0.0)"
    df["COMMENT"] = f"\"In silico generated spectrum by {version}\""
    
    # Write output file
    if args.output.endswith(".msp"):
        df["Collision_energy"] = df["CE"]
        df["Comment"] = df["COMMENT"]
        headers=["Name", "SMILES", "Precursor_type", "Instrument_type", "Collision_energy"]
        if args.rt: headers.append("RETENTIONTIME")
        if args.ccs: headers.append("CCS")
        headers.append("Comment")
        mspWriter.write_msp(df, path=args.output, write_header=True, headers=headers)
    elif args.output.endswith(".mgf"):
        headers = ["TITLE", "SMILES", "PRECURSORTYPE", "COLLISIONENERGY", "INSTRUMENTTYPE"]
        if args.rt: headers.append("RETENTIONTIME")
        if args.ccs: headers.append("CCS")
        headers.append("COMMENT")
        mgfWriter.write_mgf(df, path=args.output, write_header=True, headers=headers, header_map={"TITLE": "Name", "PRECURSORTYPE": "Precursor_type", "INSTRUMENTTYPE": "Instrument_type", "COLLISIONENERGY": "CE"}, annotation=args.annotation)
    else:
        print(f"Warning: Unknown output format {args.output}. Writing results to {args.output}.mgf instead.")
        args.output = args.output + ".mgf"
        headers = ["TITLE", "SMILES", "PRECURSORTYPE", "COLLISIONENERGY", "INSTRUMENTTYPE"]
        if args.rt: headers.append("RETENTIONTIME")
        if args.ccs: headers.append("CCS")
        headers.append("COMMENT")
        mgfWriter.write_mgf(df, path=args.output, write_header=True, headers=headers, header_map={"TITLE": "Name", "PRECURSORTYPE": "Precursor_type", "INSTRUMENTTYPE": "Instrument_type", "COLLISIONENERGY": "CE"}, annotation=args.annotation)

    print("Finished prediction.")


if __name__ == "__main__":
    main()